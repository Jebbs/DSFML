# Build version format
version: 2.1.{build}

os: Visual Studio 2015

clone_depth: 1

#Let's blacklist gh-pages
branches:
  except:
    - gh-pages

environment:
 matrix:
  - DC: dmd
    DVersion: 2.069.2 
    arch: x86
  - DC: dmd
    DVersion: 2.069.2 
    arch: x64 
  - DC: dmd
    DVersion: 2.068.2 
    arch: x86
  - DC: dmd
    DVersion: 2.068.2 
    arch: x64
  - DC: dmd
    DVersion: 2.067.1 
    arch: x86
  - DC: dmd
    DVersion: 2.067.1 
    arch: x64
  - DC: dmd
    DVersion: 2.066.1 
    arch: x86
  - DC: dmd
    DVersion: 2.066.1 
    arch: x64
  - DC: gdc
    DVersion: 5.2.0
    arch: x86
  - DC: gdc
    DVersion: 5.2.0
    arch: x64
  - DC: gdc
    DVersion: 4.9.3
    arch: x86
  - DC: gdc
    DVersion: 4.9.3
    arch: x64
  - DC: ldc
    DVersion: 0.16.1
    arch: x64
#0.15.1 doesn't work properly on Windows due to poor x64 support.
#  - DC: ldc
#    DVersion: 0.15.1
#    arch: x64


#Set up our powershell functions
init:
#putting these in here for now, will export to different script to be imported later maybe?
- ps: function SetUpDCompiler
      {
        if($env:DC -eq "dmd"){
          if($env:arch -eq "x86"){
            $env:DConf = "m32";
          }
          elseif($env:arch -eq "x64"){
            $env:DConf = "m64";
          }
          $env:toolchain = "msvc";
          $version = $env:DVersion;
          $WebLocation = "http://downloads.dlang.org/releases/2.x/$($version)/dmd.$($version).windows.zip";
          $DownloadLocation = "c:\dmd.zip";
          (new-object net.webclient).DownloadFile($WebLocation, $DownloadLocation);
          pushd c:\\;
          7z x dmd.zip > $null;
          popd;
        }
        elseif($env:DC -eq "gdc"){
          if($env:arch -eq "x86"){
            $env:DConf = "m32";
            $version = $env:DVersion;
            $WebLocation = "ftp://ftp.gdcproject.org/binaries/$($version)/i686-w64-mingw32/gdc-$($version)+2.066.1.7z";
            $mingwWebLocation = "http://dsfml.com/bins/mingw/i686-5.2.0-release-posix-dwarf-rt_v4-rev0.7z";
          }
          elseif($env:arch -eq "x64"){
            $env:DConf = "m64";
            $version = $env:DVersion;
            $WebLocation = "ftp://ftp.gdcproject.org/binaries/$($version)/x86_64-w64-mingw32/gdc-$($version)+2.066.1.7z";
            $mingwWebLocation = "http://dsfml.com/bins/mingw/x86_64-5.2.0-release-posix-seh-rt_v4-rev0.7z";
          }
          $env:toolchain = "mingw";
          $DownloadLocation = "c:\gdc.7z";
          $mingwDownloadLocation = "c:\mingw.7z";
          (new-object net.webclient).DownloadFile($WebLocation, $DownloadLocation);
          (new-object net.webclient).DownloadFile($mingwWebLocation, $mingwDownloadLocation);
          pushd c:\\;
          7z x gdc.7z > $null;
          7z x mingw.7z > $null;
          popd;
        }
        elseif($env:DC -eq "ldc"){
          if($env:arch -eq "x86"){
            $env:DConf = "m32";
          }
          elseif($env:arch -eq "x64"){
            $env:DConf = "m64";
          }
          $env:toolchain = "msvc";
          $version = $env:DVersion;
          $WebLocation = "https://github.com/ldc-developers/ldc/releases/download/v$($version)/ldc2-$($version)-win64-msvc.zip";
          $DownloadLocation = "c:\ldc.zip";
          (new-object net.webclient).DownloadFile($WebLocation, $DownloadLocation);
          pushd c:\\;
          7z x ldc.zip > $null;
          popd;
        }
    }



install:
#Install the D compiler
- ps: SetUpDCompiler


before_build:
#Set's up MSVC and MinGW
#We can't use the default PATH when using MinGW because another MinGW is on the path and it messes things up.
#We also have to set up MSVC because I couldn't get the script to work with IF statements. :(
  - ps: if($env:toolchain -eq "msvc"){
          if($env:arch -eq "x86"){
            $env:compilersetup = "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall";
            $env:compilersetupargs = "x86";
          }
          elseif($env:arch -eq "x64"){
            $env:compilersetup = "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall";
            $env:compilersetupargs = "amd64";
          }
          $env:maketype = "NMake Makefiles";
          $env:makecommand = "nmake";
        }
        elseif($env:toolchain -eq "mingw"){
          if($env:arch -eq "x86"){
            $env:compilerpath = "C:\mingw32\bin;";
            $env:cmakepath = "C:\Program Files (x86)\CMake\bin";
          }
          elseif($env:arch -eq "x64"){
            $env:compilerpath = "C:\mingw64\bin;";
            $env:cmakepath = "C:\Program Files (x86)\CMake\bin";
          }
          $env:compilersetup = "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall";
          $env:compilersetupargs = "x86";
          $env:maketype = "MinGW Makefiles";
          $env:makecommand = "mingw32-make";
        }
#Set's up our D compiler
  - ps : if($env:DC -eq "dmd"){
          $env:Dcompilerpath = "C:\dmd2\windows\bin;";
          $env:outputfile = "-ofbuild.exe";
          if($env:arch -eq "x86"){
            $env:makecommand = "nmake & implib";
          }
         }
        elseif($env:DC -eq "gdc"){
          $env:outputfile = "-obuild.exe";
          if($env:arch -eq "x86"){
            $env:Dcompilerpath = "C:\i686-w64-mingw32\bin;"; 
          }
          elseif($env:arch -eq "x64"){
            $env:Dcompilerpath = "C:\x86_64-w64-mingw32\bin;";
          }
        }
        elseif($env:DC -eq "ldc"){
          $version = $env:DVersion;
          $env:Dcompilerpath = "C:\ldc2-$($version)-win64-msvc\bin;";
          $env:outputfile = "-of=build.exe";
          $env:DC = "ldc2";
         }



#Build DSFMLC and then build DSFML with it
build_script:
- echo %VCINSTALLDIR%
- '"%compilersetup%" %compilersetupargs%'
- cd ..
- git clone --depth=1 --branch 2.3-stringpassthrough https://github.com/aubade/DSFMLC.git
- cd DSFMLC
- ps: if($env:toolchain -eq "mingw"){
        $env:Path = $env:compilerpath + $env:cmakepath;
       }
- cmake -G"%maketype%" .
- '%makecommand%'
- cd "C:\\projects\\dsfml"
- ps : $env:Path = $env:Dcompilerpath + $env:Path
- ps: if($env:DC -eq "ldc2"){
        $env:compilersetup = "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall";
       }
- '"%compilersetup%" %compilersetupargs%'
- '%DC% build.d %outputfile%'
- 'build.exe -%DConf% -unittest:C:\projects\DSFMLC\lib\'
